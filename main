import random

# Função para criar o tabuleiro com minas
def criar_tabuleiro(linhas, colunas, num_minas):
    tabuleiro = [[' ' for _ in range(colunas)] for _ in range(linhas)]
    minas = set()

# Colocando minas aleatoriamente no tabuleiro
    while len(minas) < num_minas:
        linha = random.randint(0, linhas - 1)
        coluna = random.randint(0, colunas - 1)
        minas.add((linha, coluna))

    for linha, coluna in minas:
        tabuleiro[linha][coluna] = 'M'

    return tabuleiro, minas

# Função para mostrar o tabuleiro ao jogador
def mostrar_tabuleiro(tabuleiro, revelado):
    linhas = len(tabuleiro)
    colunas = len(tabuleiro[0])
    print("   " + " ".join([str(i) for i in range(colunas)]))
    for i, linha in enumerate(tabuleiro):
        linha_mostrar = []
        for j, celula in enumerate(linha):
            if revelado[i][j]:
                linha_mostrar.append(celula)
            else:
                linha_mostrar.append('_')
        print(f"{i}  " + " ".join(linha_mostrar))

# Função para contar o número de minas adjacentes a uma célula
def contar_minas_adjacentes(tabuleiro, linha, coluna):
    linhas = len(tabuleiro)
    colunas = len(tabuleiro[0])
    contador = 0
    for l in range(max(0, linha - 1), min(linhas, linha + 2)):
        for c in range(max(0, coluna - 1), min(colunas, coluna + 2)):
            if tabuleiro[l][c] == 'M':
                contador += 1
    return contador

# Função para revelar uma célula e expandir se não houver minas adjacentes
def revelar(tabuleiro, revelado, linha, coluna):
    if revelado[linha][coluna]:
        return
    revelado[linha][coluna] = True
    if tabuleiro[linha][coluna] == ' ':
        contagem_minas = contar_minas_adjacentes(tabuleiro, linha, coluna)
        tabuleiro[linha][coluna] = str(contagem_minas) if contagem_minas > 0 else ' '
        if contagem_minas == 0:
            # Expande para células adjacentes
            for l in range(max(0, linha - 1), min(len(tabuleiro), linha + 2)):
                for c in range(max(0, coluna - 1), min(len(tabuleiro[0]), coluna + 2)):
                    if (l, c) != (linha, coluna):
                        revelar(tabuleiro, revelado, l, c)

# Função principal do jogo
def jogar():
    colunas = int(input("Digite o número de colunas (X): "))
    linhas = int(input("Digite o número de linhas (Y): "))
    num_minas = int(input("Digite o número de minas (N): "))

    tabuleiro, minas = criar_tabuleiro(linhas, colunas, num_minas)
    revelado = [[False for _ in range(colunas)] for _ in range(linhas)]

    while True:
        mostrar_tabuleiro(tabuleiro, revelado)
        try:
            linha = int(input("Digite a linha: "))
            coluna = int(input("Digite a coluna: "))
        except ValueError:
            print("Por favor, insira números válidos!")
            continue

        if (linha, coluna) in minas:
            print("Você pisou em uma mina! Fim de jogo!")
            break

        revelar(tabuleiro, revelado, linha, coluna)

        # Verifica se o jogador revelou todas as células sem minas
        if all(revelado[l][c] or tabuleiro[l][c] == 'M' for l in range(linhas) for c in range(colunas)):
            print("Parabéns! Você venceu o jogo!")
            break

# Inicia o jogo
jogar()
